# run this yml file from the CLI with: docker-compose up -d
# connect to:
# db: docker-compose exec db psql --username=svengerlach --dbname=secure_my_spot_dev
# db: docker exec -it [container name] psql --username=svengerlach --dbname=secure_my_spot_dev
# source for rabbit / redis: https://github.com/MexsonFernandes/Asynchronous_Tasks-Django-Celery-RabbitMQ-Redis/blob/master/docker-compose.yml


version: "3.8"

services:
  # django service
  web:
    container_name: django
    build: .
    image: api-img:latest
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    depends_on:
      - db
      - worker

  # Database postgres service
  db:
    container_name: postgres
    image: postgres:12.0-alpine
    restart: on-failure

  # Celery service
  worker:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile
    # todo: auto-reload should not be used for production
    # command: python manage.py celery_autoload
    # statedb: https://docs.celeryproject.org/en/stable/userguide/workers.html#persistent-revokes
    command: celery -A secure_my_spot.celeryconf worker --concurrency=1 --loglevel=INFO
    depends_on:
      - db
      - broker
      - redis
    restart: always

  # Broker service provided by RabbitMQ
  broker:
    container_name: rabbit
    image: rabbitmq:3-management
    restart: on-failure
    hostname: rabbit
    ports:
      - "5672:5672"  # We forward this port because it's useful for debugging
      - "15672:15672"  # Here, we can access RabbitMQ management plugin

  # Backend storage service for async results provided by Redis
  redis:
    container_name: redis
    image: redis
    hostname: redis
    # use the redis_entrypoint
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"